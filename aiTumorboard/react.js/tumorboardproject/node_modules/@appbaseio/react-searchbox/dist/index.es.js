import PropTypes from 'prop-types';
import React, { createElement, Fragment, Component } from 'react';
import { withEmotionCache, ThemeContext, jsx, Global } from '@emotion/core';
import Downshift from 'downshift';
import { SearchBase } from '@appbaseio/searchbase';

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var string = PropTypes.string;
var stringRequired = PropTypes.string.isRequired;
var bool = PropTypes.bool;
var object = PropTypes.object;
var array = PropTypes.array;
var number = PropTypes.number;
var func = PropTypes.func;
var any = PropTypes.any;
var element = PropTypes.element;
var queryTypes = PropTypes.oneOf(['search', 'term', 'geo', 'range']);
var sourceFields = PropTypes.arrayOf(string);
var sortType = PropTypes.oneOf(['asc', 'desc', 'count']);
var DataField = PropTypes.shape({
  field: string,
  weight: number
});
var dataField = PropTypes.oneOfType([string, PropTypes.arrayOf(PropTypes.oneOfType([string, DataField]))]);
var reactKeyType = PropTypes.oneOfType([string, PropTypes.arrayOf(string), object, PropTypes.arrayOf(object)]);
var reactType = PropTypes.shape({
  and: reactKeyType,
  or: reactKeyType,
  not: reactKeyType
});
var react = PropTypes.shape({
  and: reactType,
  or: reactType,
  not: reactType
});
var position = PropTypes.oneOf(['left', 'right']);
var suggestions = PropTypes.arrayOf(object);
var highlightField = PropTypes.oneOfType([string, PropTypes.arrayOf(string)]);
var queryFormat = PropTypes.oneOf(['and', 'or']);
var fuzziness = PropTypes.oneOf([0, 1, 2, 'AUTO']);
var title = PropTypes.oneOfType([string, any]);
var wholeNumber = function wholeNumber(props, propName, componentName) {
  if (typeof props[propName] != 'number' || props[propName] < 0) {
    return new Error("Invalid type of ".concat(propName, " supplied to ").concat(componentName, ". Validation failed"));
  }
};
var appbaseConfig = PropTypes.shape({
  recordAnalytics: bool,
  enableQueryRules: bool,
  userId: string,
  customEvents: object
});
var dataFieldValidator = function dataFieldValidator(props, propName, componentName) {
  var requiredError = new Error("".concat(propName, " supplied to ").concat(componentName, " is required. Validation failed."));
  var propValue = props[propName];

  if (!props.enableAppbase) {
    if (!propValue) return requiredError;

    if (typeof propValue !== 'string' && !Array.isArray(propValue)) {
      return new Error("Invalid ".concat(propName, " supplied to ").concat(componentName, ". Validation failed."));
    }

    if (Array.isArray(propValue) && propValue.length === 0) return requiredError;
  }
};

var SearchContext = /*#__PURE__*/React.createContext();
var getClassName = function getClassName(classMap, component) {
  return classMap && classMap[component] || '';
};
/**
 * To determine wether an element is a function
 * @param {any} element
 */

var isFunction = function isFunction(element) {
  return typeof element === 'function';
};
var getComponent = function getComponent() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var children = props.children,
      render = props.render; // Render function as child

  if (isFunction(children)) {
    return children(data);
  } // Render function as render prop


  if (isFunction(render)) {
    return render(data);
  }

  return null;
};
var hasCustomRenderer = function hasCustomRenderer() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var render = props.render,
      children = props.children;
  return isFunction(children) || isFunction(render);
};
var equals = function equals(a, b) {
  if (a === b) return true;
  if (!a || !b || _typeof(a) !== 'object' && _typeof(b) !== 'object') return a === b;
  if (a === null || a === undefined || b === null || b === undefined) return false;
  if (a.prototype !== b.prototype) return false;
  var keys = Object.keys(a);
  if (keys.length !== Object.keys(b).length) return false;
  return keys.every(function (k) {
    return equals(a[k], b[k]);
  });
};
var debounce = function debounce(method, delay) {
  clearTimeout(method._tId); // eslint-disable-next-line

  method._tId = setTimeout(function () {
    method();
  }, delay);
};
/**
 * To determine whether a component has renderPopularSuggestions prop defined or not
 * @returns {Boolean}
 */

var hasPopularSuggestionsRenderer = function hasPopularSuggestionsRenderer() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var renderPopularSuggestions = props.renderPopularSuggestions;
  return isFunction(renderPopularSuggestions);
};
/**
 * Extracts the renderPopularSuggestions prop from props and returns a valid React element
 * @param {Object} data
 * @param {Object} props
 */

var getPopularSuggestionsComponent = function getPopularSuggestionsComponent() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var renderPopularSuggestions = props.renderPopularSuggestions; // Render function as render prop

  if (isFunction(renderPopularSuggestions)) {
    return renderPopularSuggestions(data);
  }

  return null;
};
var checkValidValue = function checkValidValue(value) {
  if (value) {
    if (Array.isArray(value) && !value.length) return false;
    return true;
  }

  return false;
};
function isEqual(x, y) {
  if (x === y) return true;
  if (!(x instanceof Object) || !(y instanceof Object)) return false;
  if (x.constructor !== y.constructor) return false;
  /* eslint-disable */

  for (var p in x) {
    if (!x.hasOwnProperty(p)) continue;
    if (!y.hasOwnProperty(p)) return false;
    if (x[p] === y[p]) continue;
    if (_typeof(x[p]) !== 'object') return false;
    if (!isEqual(x[p], y[p])) return false;
  }

  for (var _p in y) {
    if (y.hasOwnProperty(_p) && !x.hasOwnProperty(_p)) return false;
  }
  /* eslint-enable */


  return true;
}

var URLParamsProvider = /*#__PURE__*/function (_React$Component) {
  _inherits(URLParamsProvider, _React$Component);

  var _super = _createSuper(URLParamsProvider);

  function URLParamsProvider() {
    var _this;

    _classCallCheck(this, URLParamsProvider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "init", function () {
      _this.searchString = window.location.search;
      _this.params = new URLSearchParams(_this.searchString);
    });

    _defineProperty(_assertThisInitialized(_this), "checkForURLParamsChange", function () {
      // we only compare the search string (window.location.search by default)
      // to see if the route has changed (or) not. This handles the following usecase:
      // search on homepage -> route changes -> search results page with same search query
      if (window) {
        var searchString = window.location.search;

        if (searchString !== _this.searchString) {
          var event;

          if (typeof Event === 'function') {
            event = new Event('popstate');
          } else {
            // Correctly fire popstate event on IE11 to prevent app crash.
            event = document.createEvent('Event');
            event.initEvent('popstate', true, true);
          }

          window.dispatchEvent(event);
        }
      }
    });

    return _this;
  }

  _createClass(URLParamsProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var id = this.props.id;

      if (window) {
        this.init();
        window.addEventListener('popstate', function () {
          var options = {
            triggerCustomQuery: true,
            triggerDefaultQuery: true,
            stateChanges: true
          };

          _this2.init();

          if (_this2.params.has(id)) {
            // Set component value
            try {
              var paramValue = JSON.parse(_this2.params.get(id));

              if (!isEqual(_this2.componentInstance.value, paramValue)) {
                _this2.componentInstance.setValue(paramValue, options);
              }
            } catch (e) {
              console.error(e); // Do not set value if JSON parsing fails.
            }
          } else if (_this2.componentInstance.value) {
            // Remove inactive component
            _this2.componentInstance.setValue(null, options);
          }
        });
        this.componentInstance.subscribeToStateChanges(function (change) {
          _this2.init(); // this ensures the url params change are handled
          // when the url changes, which enables us to
          // make `onpopstate` event handler work with history.pushState updates


          _this2.checkForURLParamsChange(); // Set URLParams on value change
          // Only set the valid values


          if (checkValidValue(change.value.next)) {
            // stringify the values
            _this2.params.set(id, JSON.stringify(change.value.next));
          } else {
            _this2.params["delete"](id);
          } // Update URLParam


          _this2.pushToHistory();
        }, ['value']);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var id = this.props.id; // Remove param on unmount

      this.params["delete"](id);
    }
  }, {
    key: "pushToHistory",
    value: function pushToHistory() {
      var paramsSting = this.params.toString() ? "?".concat(this.params.toString()) : '';
      var base = window.location.href.split('?')[0];
      var newURL = "".concat(base).concat(paramsSting);

      if (window.history.pushState) {
        window.history.pushState({
          path: newURL
        }, '', newURL);
      }

      this.init();
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }, {
    key: "componentInstance",
    get: function get() {
      var id = this.props.id;
      return this.context.getComponent(id);
    }
  }]);

  return URLParamsProvider;
}(React.Component);

_defineProperty(URLParamsProvider, "contextType", SearchContext);

URLParamsProvider.propTypes = {
  id: stringRequired
};

var SearchComponent = /*#__PURE__*/function (_React$Component) {
  _inherits(SearchComponent, _React$Component);

  var _super = _createSuper(SearchComponent);

  function SearchComponent(props, context) {
    var _this;

    _classCallCheck(this, SearchComponent);

    _this = _super.call(this, props, context);
    _this.state = {};
    var _this$props = _this.props,
        id = _this$props.id,
        index = _this$props.index,
        url = _this$props.url,
        credentials = _this$props.credentials,
        headers = _this$props.headers,
        appbaseConfig$$1 = _this$props.appbaseConfig,
        transformRequest = _this$props.transformRequest,
        transformResponse = _this$props.transformResponse,
        type = _this$props.type,
        react$$1 = _this$props.react,
        queryFormat$$1 = _this$props.queryFormat,
        dataField$$1 = _this$props.dataField,
        categoryField = _this$props.categoryField,
        categoryValue = _this$props.categoryValue,
        nestedField = _this$props.nestedField,
        from = _this$props.from,
        size = _this$props.size,
        sortBy = _this$props.sortBy,
        aggregationField = _this$props.aggregationField,
        aggregationSize = _this$props.aggregationSize,
        after = _this$props.after,
        includeNullValues = _this$props.includeNullValues,
        includeFields = _this$props.includeFields,
        excludeFields = _this$props.excludeFields,
        fuzziness$$1 = _this$props.fuzziness,
        searchOperators = _this$props.searchOperators,
        highlight = _this$props.highlight,
        highlightField$$1 = _this$props.highlightField,
        customHighlight = _this$props.customHighlight,
        interval = _this$props.interval,
        aggregations = _this$props.aggregations,
        missingLabel = _this$props.missingLabel,
        showMissing = _this$props.showMissing,
        defaultQuery = _this$props.defaultQuery,
        customQuery = _this$props.customQuery,
        enableSynonyms = _this$props.enableSynonyms,
        selectAllLabel = _this$props.selectAllLabel,
        pagination = _this$props.pagination,
        queryString = _this$props.queryString,
        onValueChange = _this$props.onValueChange,
        onResults = _this$props.onResults,
        onAggregationData = _this$props.onAggregationData,
        onError = _this$props.onError,
        onRequestStatusChange = _this$props.onRequestStatusChange,
        onQueryChange = _this$props.onQueryChange,
        onMicStatusChange = _this$props.onMicStatusChange,
        enablePopularSuggestions = _this$props.enablePopularSuggestions,
        enablePredictiveSuggestions = _this$props.enablePredictiveSuggestions,
        preserveResults = _this$props.preserveResults,
        clearOnQueryChange = _this$props.clearOnQueryChange,
        subscribeTo = _this$props.subscribeTo,
        distinctField = _this$props.distinctField,
        distinctFieldConfig = _this$props.distinctFieldConfig;
    var value = _this.props.value;

    if (window && window.location && window.location.search) {
      var params = new URLSearchParams(window.location.search);

      if (params.has(id)) {
        try {
          value = JSON.parse(params.get(id));
        } catch (e) {
          console.error(e); // Do not set value if JSON parsing fails.
        }
      }
    } // Register search base component


    context.register(id, {
      index: index,
      url: url,
      credentials: credentials,
      headers: headers,
      appbaseConfig: appbaseConfig$$1,
      transformRequest: transformRequest,
      transformResponse: transformResponse,
      value: value,
      type: type,
      react: react$$1,
      queryFormat: queryFormat$$1,
      dataField: dataField$$1,
      categoryField: categoryField,
      categoryValue: categoryValue,
      nestedField: nestedField,
      from: from,
      size: size,
      sortBy: sortBy,
      aggregationField: aggregationField,
      aggregationSize: aggregationSize,
      after: after,
      includeNullValues: includeNullValues,
      includeFields: includeFields,
      excludeFields: excludeFields,
      fuzziness: fuzziness$$1,
      searchOperators: searchOperators,
      highlight: highlight,
      highlightField: highlightField$$1,
      customHighlight: customHighlight,
      interval: interval,
      aggregations: aggregations,
      missingLabel: missingLabel,
      showMissing: showMissing,
      defaultQuery: defaultQuery,
      customQuery: customQuery,
      enableSynonyms: enableSynonyms,
      selectAllLabel: selectAllLabel,
      pagination: pagination,
      queryString: queryString,
      onValueChange: onValueChange,
      onResults: onResults,
      onAggregationData: onAggregationData,
      onError: onError,
      onRequestStatusChange: onRequestStatusChange,
      onQueryChange: onQueryChange,
      onMicStatusChange: onMicStatusChange,
      enablePopularSuggestions: enablePopularSuggestions,
      enablePredictiveSuggestions: enablePredictiveSuggestions,
      preserveResults: preserveResults,
      clearOnQueryChange: clearOnQueryChange,
      distinctField: distinctField,
      distinctFieldConfig: distinctFieldConfig
    }); // Subscribe to state changes

    if (_this.hasCustomRenderer) {
      _this.componentInstance.subscribeToStateChanges(function (change) {
        var state = {};
        Object.keys(change).forEach(function (property) {
          state[property] = change[property].next;
        });

        _this.setState(state);
      }, subscribeTo);
    }

    if (value) {
      _this.componentInstance.triggerCustomQuery();
    }

    return _this;
  }

  _createClass(SearchComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var triggerQueryOnInit = this.props.triggerQueryOnInit;

      if (triggerQueryOnInit) {
        this.componentInstance.triggerDefaultQuery();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var id = this.props.id; // unregister component

      this.context.unregister(id);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          id = _this$props2.id,
          URLParams = _this$props2.URLParams;

      if (this.hasCustomRenderer && this.componentInstance) {
        if (URLParams) {
          return /*#__PURE__*/React.createElement(URLParamsProvider, {
            id: id
          }, getComponent(this.componentInstance.mappedProps, this.props));
        }

        return getComponent(this.componentInstance.mappedProps, this.props);
      }

      return null;
    }
  }, {
    key: "componentInstance",
    get: function get() {
      var id = this.props.id;
      return this.context.getComponent(id);
    }
  }, {
    key: "hasCustomRenderer",
    get: function get() {
      return hasCustomRenderer(this.props);
    }
  }]);

  return SearchComponent;
}(React.Component);

_defineProperty(SearchComponent, "contextType", SearchContext);

SearchComponent.defaultProps = {
  // Triggers the default query on init
  triggerQueryOnInit: true,
  URLParams: false,
  enablePredictiveSuggestions: false,
  clearOnQueryChange: false
};
SearchComponent.propTypes = {
  index: string,
  url: string,
  credentials: string,
  headers: object,
  appbaseConfig: appbaseConfig,
  transformRequest: func,
  transformResponse: func,
  beforeValueChange: func,
  enablePopularSuggestions: bool,
  enablePredictiveSuggestions: bool,
  clearOnQueryChange: bool,
  URLParams: bool,
  // RS API properties
  id: stringRequired,
  value: any,
  type: queryTypes,
  react: reactType,
  queryFormat: queryFormat,
  dataField: dataField,
  categoryField: string,
  categoryValue: string,
  nestedField: string,
  from: number,
  size: number,
  sortBy: sortType,
  aggregationSize: number,
  after: object,
  includeNullValues: bool,
  includeFields: sourceFields,
  excludeFields: sourceFields,
  fuzziness: fuzziness,
  searchOperators: bool,
  preserveResults: bool,
  highlight: bool,
  highlightField: string,
  customHighlight: object,
  interval: number,
  aggregations: PropTypes.arrayOf(string),
  missingLabel: string,
  showMissing: bool,
  defaultQuery: func,
  customQuery: func,
  enableSynonyms: bool,
  selectAllLabel: string,
  pagination: bool,
  queryString: bool,
  render: func,
  distinctField: string,
  distinctFieldConfig: object,
  // subscribe on changes,
  subscribeTo: PropTypes.arrayOf(string),
  triggerQueryOnInit: bool,
  // event listeners
  // called when value changes
  onValueChange: func,
  // called when results change
  onResults: func,
  // called when composite aggregations change
  onAggregationData: func,
  // called when there is an error while fetching results
  onError: func,
  // called when request status changes
  onRequestStatusChange: func,
  // called when query changes
  onQueryChange: func,
  // called when mic status changes
  onMicStatusChange: func
};

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty$1;

function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var index = memoize(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

var isBrowser = typeof document !== 'undefined';

function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className]);
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}

var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }

  if (cache.inserted[serialized.name] === undefined) {
    var stylesForSSR = '';
    var current = serialized;

    do {
      var maybeStyles = cache.insert("." + className, current, cache.sheet, true);

      if (!isBrowser && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles;
      }

      current = current.next;
    } while (current !== undefined);

    if (!isBrowser && stylesForSSR.length !== 0) {
      return stylesForSSR;
    }
  }
};

/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

function memoize$1(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = memoize$1(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }

  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

function handleInterpolation(mergedProps, registered, interpolation, couldBeSelectorInterpolation) {
  if (interpolation == null) {
    return '';
  }

  if (interpolation.__emotion_styles !== undefined) {

    return interpolation;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }

        if (interpolation.styles !== undefined) {
          var next = interpolation.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }

          var styles = interpolation.styles + ";";

          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result, couldBeSelectorInterpolation);
        }

        break;
      }

    case 'string':

      break;
  } // finalize string values (regular strings and functions interpolated into css calls)


  if (registered == null) {
    return interpolation;
  }

  var cached = registered[interpolation];

  return cached !== undefined && !couldBeSelectorInterpolation ? cached : interpolation;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i], false);
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];

      if (typeof value !== 'object') {
        if (registered != null && registered[value] !== undefined) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
          throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
        }

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value, false);

          switch (_key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }

            default:
              {

                string += _key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;
// keyframes are stored on the SerializedStyles object as a linked list


var cursor;

var serializeStyles = function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings, false);
  } else {

    styles += strings[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i], styles.charCodeAt(styles.length - 1) === 46);

    if (stringMode) {

      styles += strings[i];
    }
  }


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + // $FlowFixMe we know it's not null
    match[1];
  }

  var name = murmur2(styles) + identifierName;

  return {
    name: name,
    styles: styles,
    next: cursor
  };
};

var testOmitPropsOnStringTag = index;

var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
  return key !== 'theme' && key !== 'innerRef';
};

var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
  return typeof tag === 'string' && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$1(source, true).forEach(function (key) {
        defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}
var isBrowser$1 = typeof document !== 'undefined';

var createStyled = function createStyled(tag, options) {

  var identifierName;
  var shouldForwardProp;
  var targetClassName;

  if (options !== undefined) {
    identifierName = options.label;
    targetClassName = options.target;
    shouldForwardProp = tag.__emotion_forwardProp && options.shouldForwardProp ? function (propName) {
      return tag.__emotion_forwardProp(propName) && // $FlowFixMe
      options.shouldForwardProp(propName);
    } : options.shouldForwardProp;
  }

  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;

  if (typeof shouldForwardProp !== 'function' && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp;
  }

  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp('as');
  return function () {
    var args = arguments;
    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

    if (identifierName !== undefined) {
      styles.push("label:" + identifierName + ";");
    }

    if (args[0] == null || args[0].raw === undefined) {
      styles.push.apply(styles, args);
    } else {

      styles.push(args[0][0]);
      var len = args.length;
      var i = 1;

      for (; i < len; i++) {

        styles.push(args[i], args[0][i]);
      }
    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


    var Styled = withEmotionCache(function (props, context, ref) {
      return createElement(ThemeContext.Consumer, null, function (theme) {
        var finalTag = shouldUseAs && props.as || baseTag;
        var className = '';
        var classInterpolations = [];
        var mergedProps = props;

        if (props.theme == null) {
          mergedProps = {};

          for (var key in props) {
            mergedProps[key] = props[key];
          }

          mergedProps.theme = theme;
        }

        if (typeof props.className === 'string') {
          className = getRegisteredStyles(context.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }

        var serialized = serializeStyles(styles.concat(classInterpolations), context.registered, mergedProps);
        var rules = insertStyles(context, serialized, typeof finalTag === 'string');
        className += context.key + "-" + serialized.name;

        if (targetClassName !== undefined) {
          className += " " + targetClassName;
        }

        var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
        var newProps = {};

        for (var _key in props) {
          if (shouldUseAs && _key === 'as') continue;

          if ( // $FlowFixMe
          finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }

        newProps.className = className;
        newProps.ref = ref || props.innerRef;

        var ele = createElement(finalTag, newProps);

        if (!isBrowser$1 && rules !== undefined) {
          var _ref;

          var serializedNames = serialized.name;
          var next = serialized.next;

          while (next !== undefined) {
            serializedNames += ' ' + next.name;
            next = next.next;
          }

          return createElement(Fragment, null, createElement("style", (_ref = {}, _ref["data-emotion-" + context.key] = serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = context.sheet.nonce, _ref)), ele);
        }

        return ele;
      });
    });
    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles;
    Styled.__emotion_forwardProp = shouldForwardProp;
    Object.defineProperty(Styled, 'toString', {
      value: function value() {
        if (targetClassName === undefined && "production" !== 'production') {
          return 'NO_COMPONENT_SELECTOR';
        } // $FlowFixMe: coerce undefined to string


        return "." + targetClassName;
      }
    });

    Styled.withComponent = function (nextTag, nextOptions) {
      return createStyled(nextTag, nextOptions !== undefined ? _objectSpread$1({}, options || {}, {}, nextOptions) : options).apply(void 0, styles);
    };

    return Styled;
  };
};

var input = {
  name: "gcg8x1-input",
  styles: "width:100%;height:42px;padding:8px 12px;border:1px solid #ccc;background-color:#fafafa;font-size:0.9rem;outline:none;box-sizing:border-box;&:focus{background-color:#fff;};label:input;"
};

var _ref = {
  name: "1q7il3q-Input",
  styles: "padding-left:32px;;label:Input;"
};

var _ref2 = {
  name: "1wwm10n-Input",
  styles: "padding-right:32px;;label:Input;"
};

var _ref3 = {
  name: "1wwm10n-Input",
  styles: "padding-right:32px;;label:Input;"
};

var _ref4 = {
  name: "y0sz5u-Input",
  styles: "padding-right:48px;;label:Input;"
};

var Input = createStyled("input", {
  target: "e1livqgm0",
  label: "Input"
})(input, " ", function (props) {
  return props.showIcon && props.iconPosition === 'left' && _ref;
}, ";", function (props) {
  return props.showIcon && props.iconPosition === 'right' && _ref2;
}, ";", function (props) {
  return (// for clear icon
    props.showClear && _ref3
  );
}, ";", function (props) {
  return (// for clear icon with search icon
    props.showClear && props.showIcon && props.iconPosition === 'right' && _ref4
  );
}, ";" + (""));

var Title = createStyled("h2", {
  target: "eld44a20",
  label: "Title"
})({
  name: "1pwe92q",
  styles: "margin:0 0 8px;font-size:1rem;color:#424242;"
});

var CancelSvg = function CancelSvg(_ref) {
  var onClick = _ref.onClick;
  return /*#__PURE__*/React.createElement("svg", {
    alt: "Clear",
    className: "cancel-icon",
    height: "10",
    onClick: onClick,
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 212.982 212.982"
  }, /*#__PURE__*/React.createElement("title", null, "Clear"), /*#__PURE__*/React.createElement("path", {
    d: "M131.804,106.491l75.936-75.936c6.99-6.99,6.99-18.323,0-25.312 c-6.99-6.99-18.322-6.99-25.312,0l-75.937,75.937L30.554,5.242c-6.99-6.99-18.322-6.99-25.312,0c-6.989,6.99-6.989,18.323,0,25.312 l75.937,75.936L5.242,182.427c-6.989,6.99-6.989,18.323,0,25.312c6.99,6.99,18.322,6.99,25.312,0l75.937-75.937l75.937,75.937 c6.989,6.99,18.322,6.99,25.312,0c6.99-6.99,6.99-18.322,0-25.312L131.804,106.491z"
  }));
};

CancelSvg.propTypes = {
  onClick: func
};

var left = "\n  padding-left: 12px;\n  left: 0;\n";
var right = "\n  padding-right: 12px;\n  right: 0;\n";
var clear = "\n  padding-right: 32px;\n  right: 0;\n  top: 9px;\n";

var InputIcon = createStyled("div", {
  target: "ed69a4z0",
  label: "InputIcon"
})("position:absolute;top:", function (_ref) {
  var isClearIcon = _ref.isClearIcon;
  return isClearIcon ? '10px' : '13px';
}, ";cursor:pointer;", function (_ref2) {
  var iconPosition = _ref2.iconPosition;

  if (iconPosition === 'left') {
    return left;
  }

  if (iconPosition === 'right') {
    return right;
  }

  return null;
}, ";", function (_ref3) {
  var clearIcon = _ref3.clearIcon;
  return clearIcon && clear;
}, ";", function (_ref4) {
  var showIcon = _ref4.showIcon;
  return !showIcon && 'padding-right:10px';
}, ";svg.search-icon{fill:#0b6aff;}" + (""));

var SearchSvg = function SearchSvg() {
  return /*#__PURE__*/React.createElement("svg", {
    alt: "Search",
    className: "search-icon",
    height: "14",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 15 15"
  }, /*#__PURE__*/React.createElement("title", null, "Search"), /*#__PURE__*/React.createElement("path", {
    d: " M6.02945,10.20327a4.17382,4.17382,0,1,1,4.17382-4.17382A4.15609,4.15609, 0,0,1,6.02945,10.20327Zm9.69195,4.2199L10.8989,9.59979A5.88021,5.88021, 0,0,0,12.058,6.02856,6.00467,6.00467,0,1,0,9.59979,10.8989l4.82338, 4.82338a.89729.89729,0,0,0,1.29912,0,.89749.89749,0,0,0-.00087-1.29909Z "
  }));
};

var right$1 = "\n  right: 35px;\n";

var MicIcon = createStyled("div", {
  target: "em2riw00",
  label: "MicIcon"
})("height:40px;position:absolute;top:11px;cursor:pointer;right:15px;", function (_ref) {
  var iconPosition = _ref.iconPosition,
      showClear = _ref.showClear;
  if (showClear && iconPosition !== 'left') return 'right: 51px;';

  if (iconPosition === 'right' || showClear) {
    return right$1;
  }

  return null;
}, " ", function (_ref2) {
  var showIcon = _ref2.showIcon,
      showClear = _ref2.showClear;
  if (!showIcon && showClear) return 'right: 32px;';
  if (!showIcon && !showClear) return 'right: 15px;';
  return null;
}, " width:11px;" + (""));

var STATUS = {
  inactive: 'INACTIVE',
  stopped: 'STOPPED',
  active: 'ACTIVE',
  denied: 'DENIED'
};

var Icon = function Icon(props) {
  var status = props.status,
      rest = _objectWithoutProperties(props, ["status"]);

  var url;

  if (!window.SpeechRecognition) {
    url = 'https://cdn3.iconfinder.com/data/icons/glypho-music-and-sound/64/microphone-off-512.png';
  }

  switch (status) {
    case STATUS.active:
      url = 'https://media.giphy.com/media/ZZr4lCvpuMP58PXzY1/giphy.gif';
      break;

    case STATUS.stopped:
      break;

    case STATUS.denied:
      url = 'https://cdn3.iconfinder.com/data/icons/glypho-music-and-sound/64/microphone-off-512.png';
      break;

    default:
      url = 'https://cdn3.iconfinder.com/data/icons/glypho-music-and-sound/64/microphone-512.png';
  }

  return /*#__PURE__*/React.createElement("img", _extends({}, rest, {
    src: url,
    style: {
      width: '18px'
    }
  }));
};

var Mic = /*#__PURE__*/function (_Component) {
  _inherits(Mic, _Component);

  var _super = _createSuper(Mic);

  function Mic() {
    _classCallCheck(this, Mic);

    return _super.apply(this, arguments);
  }

  _createClass(Mic, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
      return nextProps.iconPosition !== this.props.iconPosition || nextProps.className !== this.props.className || nextProps.status !== this.props.status || nextProps.applyClearStyle !== this.props.applyClearStyle || nextProps.showIcon !== this.props.showIcon;
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          iconPosition = _this$props.iconPosition,
          className = _this$props.className,
          onClick = _this$props.onClick,
          status = _this$props.status,
          applyClearStyle = _this$props.applyClearStyle,
          showIcon = _this$props.showIcon;

      var getComponent$$1 = function getComponent$$1() {
        var data = {
          onClick: onClick,
          status: status
        };
        return getComponent(data, _this.props);
      };

      var hasCustomRenderer$$1 = hasCustomRenderer(this.props);
      return /*#__PURE__*/React.createElement(MicIcon, {
        showIcon: showIcon,
        iconPosition: iconPosition,
        showClear: applyClearStyle
      }, hasCustomRenderer$$1 ? getComponent$$1() : /*#__PURE__*/React.createElement(Icon, {
        className: className,
        onClick: onClick,
        status: status
      }));
    }
  }]);

  return Mic;
}(Component);

var SearchIcon = function SearchIcon(props) {
  if (props.showIcon) {
    return props.icon || /*#__PURE__*/React.createElement(SearchSvg, null);
  }

  return null;
};

var Icons = function Icons(props) {
  var clearValue = props.clearValue,
      iconPosition = props.iconPosition,
      showClear = props.showClear,
      clearIcon = props.clearIcon,
      currentValue = props.currentValue,
      handleSearchIconClick = props.handleSearchIconClick,
      showIcon = props.showIcon,
      icon = props.icon,
      enableVoiceSearch = props.enableVoiceSearch,
      innerClass = props.innerClass,
      renderMic = props.renderMic,
      getMicInstance = props.getMicInstance,
      onMicClick = props.onMicClick,
      micStatus = props.micStatus;
  return /*#__PURE__*/React.createElement("div", null, currentValue && showClear && /*#__PURE__*/React.createElement(InputIcon, {
    onClick: clearValue,
    iconPosition: "right",
    clearIcon: iconPosition === 'right',
    showIcon: showIcon,
    isClearIcon: true
  }, clearIcon || /*#__PURE__*/React.createElement(CancelSvg, null)), enableVoiceSearch && /*#__PURE__*/React.createElement(Mic, {
    getInstance: getMicInstance,
    render: renderMic,
    iconPosition: iconPosition,
    className: getClassName(innerClass, 'mic') || null,
    onClick: onMicClick,
    status: micStatus,
    applyClearStyle: !!currentValue && showClear,
    showIcon: showIcon
  }), /*#__PURE__*/React.createElement(InputIcon, {
    showIcon: showIcon,
    onClick: handleSearchIconClick,
    iconPosition: iconPosition
  }, /*#__PURE__*/React.createElement(SearchIcon, {
    showIcon: showIcon,
    icon: icon
  })));
};

var SuggestionItem = function SuggestionItem(_ref) {
  var currentValue = _ref.currentValue,
      suggestion = _ref.suggestion;
  var label = suggestion.label,
      value = suggestion.value,
      isPredictiveSuggestion = suggestion.isPredictiveSuggestion;
  var stringToReplace = currentValue.split(' ').join('|'); // label has highest precedence

  if (label) {
    if (typeof label === 'string') {
      try {
        return /*#__PURE__*/React.createElement("div", {
          className: "trim",
          dangerouslySetInnerHTML: {
            __html: isPredictiveSuggestion ? label : label.replace(new RegExp(stringToReplace, 'ig'), function (matched) {
              return "<mark class=\"highlight-class\">".concat(matched, "</mark>");
            })
          }
        });
      } catch (e) {
        return label;
      }
    }

    return label;
  }

  return value;
};

var suggestions$1 = {
  name: "1ny5mm3-suggestions",
  styles: "display:block;width:100%;border:1px solid #ccc;background-color:#fff;font-size:0.9rem;z-index:3;position:absolute;top:41px;margin:0;padding:0;list-style:none;max-height:390px;overflow-y:auto;box-sizing:border-box;&.small{top:30px;}li{display:flex;justify-content:space-between;cursor:pointer;padding:10px;user-select:none;.trim{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}&:hover,&:focus{background-color:#eee;}.highlight-class{font-weight:600;padding:0;background-color:transparent;color:inherit;}};label:suggestions;"
};
var suggestionsContainer = {
  name: "ad5krn-suggestionsContainer",
  styles: "position:relative;.cancel-icon{cursor:pointer;}.no-suggestions{border:1px solid #ccc;border-top:0;font-size:0.9rem;padding:10px;};label:suggestionsContainer;"
};

var SuggestionWrapper = function SuggestionWrapper(_ref) {
  var className = _ref.className,
      children = _ref.children,
      innerClassName = _ref.innerClassName,
      innerClass = _ref.innerClass;
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(className, " ").concat(getClassName(innerClass, innerClassName || ''))
  }, children);
};

// A map of causes leading to changes in components
var ENTER_PRESS = 'ENTER_PRESS';
var SUGGESTION_SELECT = 'SUGGESTION_SELECT';
var CLEAR_VALUE = 'CLEAR_VALUE';
var SEARCH_ICON_CLICK = 'SEARCH_ICON_CLICK';
var causes = {
  ENTER_PRESS: ENTER_PRESS,
  SUGGESTION_SELECT: SUGGESTION_SELECT,
  CLEAR_VALUE: CLEAR_VALUE,
  SEARCH_ICON_CLICK: SEARCH_ICON_CLICK
};

var CustomSvg = function CustomSvg(_ref) {
  var iconId = _ref.iconId,
      className = _ref.className,
      icon = _ref.icon,
      type = _ref.type;

  if (icon) {
    return /*#__PURE__*/React.createElement('div', {
      className: className
    }, [/*#__PURE__*/React.cloneElement(icon, {
      key: iconId
    })]);
  }

  if (type === 'recent-search-icon') {
    return /*#__PURE__*/React.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      alt: "Recent Search",
      height: "20",
      width: "20",
      viewBox: "0 0 24 24",
      style: {
        fill: '#707070'
      },
      className: className
    }, /*#__PURE__*/React.createElement("path", {
      d: "M0 0h24v24H0z",
      fill: "none"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"
    }));
  }

  return /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    alt: "Popular Search",
    height: "20",
    width: "20",
    viewBox: "0 0 24 24",
    style: {
      fill: '#707070'
    },
    className: className
  }, /*#__PURE__*/React.createElement("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"
  }));
};

CustomSvg.propTypes = {
  iconId: string,
  className: string,
  icon: element,
  type: string
};

var SearchBox = /*#__PURE__*/function (_React$Component) {
  _inherits(SearchBox, _React$Component);

  var _super = _createSuper(SearchBox);

  function SearchBox(props, context) {
    var _this;

    _classCallCheck(this, SearchBox);

    _this = _super.call(this, props, context);

    _defineProperty(_assertThisInitialized(_this), "_applySetter", function (prev, next, setterFunc) {
      if (!equals(prev, next)) _this.componentInstance && _this.componentInstance[setterFunc](next);
    });

    _defineProperty(_assertThisInitialized(_this), "getComponent", function () {
      var downshiftProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var isPopularSuggestionsRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _this$props = _this.props,
          error = _this$props.error,
          loading = _this$props.loading;
      var data = {
        error: error,
        loading: loading,
        downshiftProps: downshiftProps,
        data: _this.suggestionsList,
        value: _this.componentInstance.value,
        triggerClickAnalytics: _this.triggerClickAnalytics,
        promotedData: _this.componentInstance.results.promotedData,
        customData: _this.componentInstance.results.customData,
        resultStats: _this.stats,
        rawData: _this.componentInstance.results.rawData,
        popularSuggestions: _this.popularSuggestionsList,
        recentSearches: _this.componentInstance.recentSearches
      };

      if (isPopularSuggestionsRender) {
        return getPopularSuggestionsComponent({
          downshiftProps: downshiftProps,
          data: _this.popularSuggestionsList,
          value: _this.componentInstance.value,
          loading: loading,
          error: error
        }, _this.props);
      }

      return getComponent(data, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "triggerClickAnalytics", function (clickPosition) {
      var isSuggestion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = arguments.length > 2 ? arguments[2] : undefined;
      var appbaseConfig$$1 = _this.props.appbaseConfig;
      if (!(appbaseConfig$$1 && appbaseConfig$$1.recordAnalytics) || !_this.componentInstance) return;

      _this.componentInstance.recordClick(_defineProperty({}, value, clickPosition), isSuggestion);
    });

    _defineProperty(_assertThisInitialized(_this), "withTriggerQuery", function (cb) {
      if (cb) {
        return function (e) {
          return cb(e, _this.triggerQuery);
        };
      }

      return undefined;
    });

    _defineProperty(_assertThisInitialized(_this), "triggerQuery", function () {
      _this.componentInstance && _this.componentInstance.setValue(_this.props.value, {
        triggerCustomQuery: true,
        stateChanges: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "triggerCustomQuery", function () {
      if (_this.componentInstance) {
        _this.componentInstance.triggerCustomQuery();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "triggerDefaultQuery", function () {
      _this.componentInstance && _this.componentInstance.triggerDefaultQuery();
    });

    _defineProperty(_assertThisInitialized(_this), "onInputChange", function (event) {
      _this.setValue({
        value: event.target.value,
        event: event
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setValue", function (_ref) {
      var value = _ref.value,
          _ref$isOpen = _ref.isOpen,
          isOpen = _ref$isOpen === void 0 ? true : _ref$isOpen,
          rest = _objectWithoutProperties(_ref, ["value", "isOpen"]);

      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          debounce$$1 = _this$props2.debounce,
          enableRecentSearches = _this$props2.enableRecentSearches,
          autosuggest = _this$props2.autosuggest;

      if (enableRecentSearches && !value && _this.componentInstance.value && autosuggest) {
        _this.componentInstance.getRecentSearches();
      }

      if (onChange) {
        onChange(value, _this.triggerQuery, rest.event);
      } else {
        _this.setState({
          isOpen: isOpen
        });

        if (debounce$$1 > 0) {
          _this.componentInstance.setValue(value, {
            triggerDefaultQuery: false,
            triggerCustomQuery: false,
            stateChanges: true
          });

          if (autosuggest) {
            debounce(_this.triggerDefaultQuery, debounce$$1);
          } else {
            debounce(_this.triggerCustomQuery, debounce$$1);
          }

          if (rest.triggerCustomQuery) {
            _this.triggerCustomQuery();
          }
        } else {
          _this.componentInstance.setValue(value || '', {
            triggerCustomQuery: rest.triggerCustomQuery,
            triggerDefaultQuery: !!autosuggest,
            stateChanges: true
          });

          if (!autosuggest) {
            _this.triggerCustomQuery();
          }
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onValueSelected", function () {
      var currentValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.componentInstance.value;
      var onValueSelected = _this.props.onValueSelected;

      if (onValueSelected) {
        for (var _len = arguments.length, cause = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          cause[_key - 1] = arguments[_key];
        }

        onValueSelected.apply(void 0, [currentValue].concat(cause));
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getBackgroundColor", function (highlightedIndex, index) {
      return highlightedIndex === index ? '#eee' : '#fff';
    });

    _defineProperty(_assertThisInitialized(_this), "handleSearchIconClick", function () {
      var currentValue = _this.componentInstance.value;

      if (currentValue.trim()) {
        _this.setValue({
          value: currentValue,
          isOpen: false,
          triggerCustomQuery: true
        });

        _this.onValueSelected(currentValue, causes.SEARCH_ICON_CLICK);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "clearValue", function () {
      _this.setValue({
        value: '',
        isOpen: false,
        triggerCustomQuery: true
      });

      _this.onValueSelected(null, causes.CLEAR_VALUE);
    });

    _defineProperty(_assertThisInitialized(_this), "onSuggestionSelected", function (suggestion) {
      _this.setValue({
        value: suggestion && suggestion.value,
        isOpen: false,
        triggerCustomQuery: true
      });

      _this.triggerClickAnalytics(suggestion && suggestion._click_id, true, suggestion.source && suggestion.source._id);

      _this.onValueSelected(suggestion.value, causes.SUGGESTION_SELECT, suggestion.source);
    });

    _defineProperty(_assertThisInitialized(_this), "handleStateChange", function (changes) {
      var isOpen = changes.isOpen,
          type = changes.type;

      if (type === Downshift.stateChangeTypes.mouseUp) {
        _this.setState({
          isOpen: isOpen
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (event) {
      _this.setState({
        isOpen: true
      });

      if (_this.props.onFocus) {
        _this.props.onFocus(event, _this.triggerQuery);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "renderIcons", function () {
      var _this$props3 = _this.props,
          iconPosition = _this$props3.iconPosition,
          showClear = _this$props3.showClear,
          clearIcon = _this$props3.clearIcon,
          getMicInstance = _this$props3.getMicInstance,
          renderMic = _this$props3.renderMic,
          innerClass = _this$props3.innerClass,
          showVoiceSearch = _this$props3.showVoiceSearch,
          icon = _this$props3.icon,
          showIcon = _this$props3.showIcon,
          micStatus = _this$props3.micStatus;
      var currentValue = _this.componentInstance.value;
      return jsx(Icons, {
        clearValue: _this.clearValue,
        iconPosition: iconPosition,
        showClear: showClear,
        clearIcon: clearIcon,
        currentValue: currentValue,
        handleSearchIconClick: _this.handleSearchIconClick,
        icon: icon,
        showIcon: showIcon,
        getMicInstance: getMicInstance,
        renderMic: renderMic,
        innerClass: innerClass,
        enableVoiceSearch: showVoiceSearch,
        onMicClick: function onMicClick() {
          _this.componentInstance && _this.componentInstance.onMicClick(null);
        },
        micStatus: micStatus
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderNoSuggestion", function () {
      var _this$props4 = _this.props,
          renderNoSuggestion = _this$props4.renderNoSuggestion,
          innerClass = _this$props4.innerClass,
          renderError = _this$props4.renderError,
          loading = _this$props4.loading,
          error = _this$props4.error;
      var isOpen = _this.state.isOpen;
      var currentValue = _this.componentInstance.value;

      if (renderNoSuggestion && isOpen && !_this.suggestionsList.length && !loading && currentValue && !(renderError && error)) {
        return jsx(SuggestionWrapper, {
          className: "no-suggestions",
          innerClass: innerClass,
          innerClassName: "noSuggestion"
        }, typeof renderNoSuggestion === 'function' ? renderNoSuggestion(currentValue) : renderNoSuggestion);
      }

      return null;
    });

    _defineProperty(_assertThisInitialized(_this), "renderError", function () {
      var _this$props5 = _this.props,
          renderError = _this$props5.renderError,
          innerClass = _this$props5.innerClass,
          error = _this$props5.error,
          loading = _this$props5.loading;
      var currentValue = _this.componentInstance.value;

      if (error && renderError && currentValue && !loading) {
        return jsx(SuggestionWrapper, {
          innerClass: innerClass,
          innerClassName: "error"
        }, isFunction(renderError) ? renderError(error) : renderError);
      }

      return null;
    });

    _defineProperty(_assertThisInitialized(_this), "renderLoader", function () {
      var _this$props6 = _this.props,
          loader = _this$props6.loader,
          innerClass = _this$props6.innerClass,
          loading = _this$props6.loading;
      var currentValue = _this.componentInstance.value;

      if (loading && loader && currentValue) {
        return jsx(SuggestionWrapper, {
          innerClass: innerClass,
          innerClassName: "loader"
        }, loader);
      }

      return null;
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (event, highlightedIndex) {
      // if a suggestion was selected, delegate the handling
      // to suggestion handler
      if (event.key === 'Enter' && highlightedIndex === null) {
        _this.setValue({
          value: event.target.value,
          isOpen: false,
          triggerCustomQuery: true
        });

        _this.onValueSelected(event.target.value, causes.ENTER_PRESS);
      }

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(event, _this.triggerQuery);
      }
    });

    var _value = props.value,
        defaultValue = props.defaultValue;

    var _currentValue = _value || defaultValue || '';

    _this.state = {
      isOpen: false
    }; // Set the value in searchbase instance

    if (_currentValue) {
      _this.componentInstance.setValue(_currentValue, {
        triggerDefaultQuery: false,
        triggerCustomQuery: true,
        stateChanges: true
      });
    }

    return _this;
  }

  _createClass(SearchBox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props7 = this.props,
          enableRecentSearches = _this$props7.enableRecentSearches,
          autosuggest = _this$props7.autosuggest,
          aggregationField = _this$props7.aggregationField;

      if (aggregationField) {
        console.warn('Warning(SearchBox): The `aggregationField` prop has been marked as deprecated, please use the `distinctField` prop instead.');
      }

      if (enableRecentSearches && autosuggest) {
        this.componentInstance.getRecentSearches();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props8 = this.props,
          dataField$$1 = _this$props8.dataField,
          headers = _this$props8.headers,
          fuzziness$$1 = _this$props8.fuzziness,
          nestedField = _this$props8.nestedField,
          appbaseConfig$$1 = _this$props8.appbaseConfig;

      this._applySetter(prevProps.dataField, dataField$$1, 'setDataField');

      this._applySetter(prevProps.headers, headers, 'setHeaders');

      this._applySetter(prevProps.fuzziness, fuzziness$$1, 'setFuzziness');

      this._applySetter(prevProps.nestedField, nestedField, 'setNestedField');

      if (JSON.stringify(prevProps.appbaseConfig) !== JSON.stringify(appbaseConfig$$1)) {
        if (this.componentInstance) this.componentInstance.appbaseConfig = appbaseConfig$$1;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props9 = this.props,
          style = _this$props9.style,
          className = _this$props9.className,
          title$$1 = _this$props9.title,
          innerClass = _this$props9.innerClass,
          defaultSuggestions = _this$props9.defaultSuggestions,
          autosuggest = _this$props9.autosuggest,
          showIcon = _this$props9.showIcon,
          showClear = _this$props9.showClear,
          iconPosition = _this$props9.iconPosition,
          placeholder = _this$props9.placeholder,
          onBlur = _this$props9.onBlur,
          onKeyPress = _this$props9.onKeyPress,
          onKeyUp = _this$props9.onKeyUp,
          downShiftProps = _this$props9.downShiftProps,
          onFocus = _this$props9.onFocus,
          onKeyDown = _this$props9.onKeyDown,
          autoFocus = _this$props9.autoFocus,
          value = _this$props9.value,
          size = _this$props9.size,
          recentSearches = _this$props9.recentSearches,
          recentSearchesIcon = _this$props9.recentSearchesIcon,
          popularSearchesIcon = _this$props9.popularSearchesIcon;
      var currentValue = this.componentInstance.value || '';
      var hasSuggestions = defaultSuggestions || recentSearches;
      return jsx("div", {
        style: style,
        className: className
      }, title$$1 && jsx(Title, {
        className: getClassName(innerClass, 'title') || null
      }, title$$1), hasSuggestions || autosuggest ? jsx(Downshift, _extends({
        onChange: this.onSuggestionSelected,
        onStateChange: this.handleStateChange,
        isOpen: this.state.isOpen,
        itemToString: function itemToString(i) {
          return i;
        }
      }, downShiftProps), function (_ref2) {
        var getInputProps = _ref2.getInputProps,
            getItemProps = _ref2.getItemProps,
            isOpen = _ref2.isOpen,
            highlightedIndex = _ref2.highlightedIndex,
            getRootProps = _ref2.getRootProps,
            rest = _objectWithoutProperties(_ref2, ["getInputProps", "getItemProps", "isOpen", "highlightedIndex", "getRootProps"]);

        return jsx("div", getRootProps({
          css: suggestionsContainer
        }), jsx(Input, _extends({
          showIcon: showIcon,
          showClear: showClear,
          iconPosition: iconPosition
        }, getInputProps({
          className: getClassName(innerClass, 'input'),
          placeholder: placeholder,
          value: value || (currentValue === null ? '' : currentValue),
          onChange: _this2.onInputChange,
          onBlur: _this2.withTriggerQuery(onBlur),
          onFocus: _this2.handleFocus,
          onKeyPress: _this2.withTriggerQuery(onKeyPress),
          onKeyUp: _this2.withTriggerQuery(onKeyUp),
          onKeyDown: function onKeyDown(e) {
            return _this2.handleKeyDown(e, highlightedIndex);
          }
        }))), _this2.renderIcons(), _this2.hasCustomRenderer && jsx("div", null, _this2.getComponent(_objectSpread2({
          getInputProps: getInputProps,
          getItemProps: getItemProps,
          isOpen: isOpen,
          highlightedIndex: highlightedIndex
        }, rest)), _this2.renderLoader()), _this2.renderError(), !_this2.hasCustomRenderer && isOpen ? jsx("ul", {
          css: suggestions$1,
          className: getClassName(innerClass, 'list')
        }, _this2.suggestionsList.slice(0, size).map(function (item, index) {
          return jsx("li", _extends({}, getItemProps({
            item: item
          }), {
            key: "".concat(index + 1, "-").concat(item.value),
            style: {
              backgroundColor: _this2.getBackgroundColor(highlightedIndex, index)
            }
          }), jsx(SuggestionItem, {
            currentValue: currentValue,
            suggestion: item
          }));
        }), !currentValue ? (recentSearches || []).map(function (sugg, index) {
          return jsx("li", _extends({}, getItemProps({
            item: sugg
          }), {
            key: "".concat(index + 1, "-").concat(sugg.value),
            style: {
              backgroundColor: _this2.getBackgroundColor(highlightedIndex, index),
              justifyContent: 'flex-start'
            }
          }), jsx("div", {
            style: {
              padding: '0 10px 0 0'
            }
          }, jsx(CustomSvg, {
            iconId: "".concat(index + 1, "-").concat(sugg.value, "-icon"),
            className: getClassName(innerClass, 'recent-search-icon') || null,
            icon: recentSearchesIcon,
            type: "recent-search-icon"
          })), jsx(SuggestionItem, {
            currentValue: currentValue,
            suggestion: sugg
          }));
        }) : null, hasPopularSuggestionsRenderer(_this2.props) ? _this2.getComponent(_objectSpread2({
          getInputProps: getInputProps,
          getItemProps: getItemProps,
          isOpen: isOpen,
          highlightedIndex: highlightedIndex
        }, rest), true) : (_this2.popularSuggestionsList || []).map(function (sugg, index) {
          return jsx("li", _extends({}, getItemProps({
            item: sugg
          }), {
            key: "".concat(index + _this2.suggestionsList.length + 1, "-").concat(sugg.value),
            style: {
              backgroundColor: _this2.getBackgroundColor(highlightedIndex, index + _this2.suggestionsList.length),
              justifyContent: 'flex-start'
            }
          }), jsx("div", {
            style: {
              padding: '0 10px 0 0'
            }
          }, jsx(CustomSvg, {
            iconId: "".concat(index + 1, "-").concat(sugg.value, "-icon"),
            className: getClassName(innerClass, 'popular-search-icon') || null,
            icon: popularSearchesIcon,
            type: "popular-search-icon"
          })), jsx(SuggestionItem, {
            currentValue: currentValue,
            suggestion: sugg
          }));
        })) : _this2.renderNoSuggestion());
      }) : jsx("div", {
        css: suggestionsContainer
      }, jsx(Input, {
        className: getClassName(innerClass, 'input') || null,
        placeholder: placeholder,
        value: value || (currentValue === null ? '' : currentValue),
        onChange: this.onInputChange,
        onBlur: this.withTriggerQuery(onBlur),
        onFocus: this.withTriggerQuery(onFocus),
        onKeyPress: this.withTriggerQuery(onKeyPress),
        onKeyDown: this.withTriggerQuery(onKeyDown),
        onKeyUp: this.withTriggerQuery(onKeyUp),
        autoFocus: autoFocus,
        iconPosition: iconPosition,
        showIcon: showIcon,
        showClear: showClear
      }), this.renderIcons()));
    }
  }, {
    key: "componentInstance",
    get: function get() {
      var id = this.props.id;
      return this.context.getComponent(id);
    }
  }, {
    key: "popularSuggestionsList",
    get: function get() {
      var suggestions$$1 = this.componentInstance.suggestions;
      return (suggestions$$1 || []).filter(function (suggestion) {
        return suggestion.source._popular_suggestion;
      });
    }
  }, {
    key: "suggestionsList",
    get: function get() {
      var defaultSuggestions = this.props.defaultSuggestions;

      if (!this.componentInstance.value && defaultSuggestions) {
        return defaultSuggestions;
      }

      if (!this.componentInstance.value) {
        return [];
      }

      var suggestions$$1 = this.componentInstance.suggestions;
      return (suggestions$$1 || []).filter(function (suggestion) {
        return !suggestion.source._popular_suggestion;
      });
    }
  }, {
    key: "stats",
    get: function get() {
      var total = this.componentInstance.results.numberOfResults;
      var _this$componentInstan2 = this.componentInstance.results,
          time = _this$componentInstan2.time,
          hidden = _this$componentInstan2.hidden,
          promotedData = _this$componentInstan2.promotedData;
      var size = this.props.size || 10;
      return _objectSpread2(_objectSpread2({
        numberOfResults: total
      }, size > 0 ? {
        numberOfPages: Math.ceil(total / size)
      } : null), {}, {
        time: time,
        hidden: hidden,
        promoted: promotedData && promotedData.length
      });
    }
  }, {
    key: "hasCustomRenderer",
    get: function get() {
      return hasCustomRenderer(this.props);
    }
  }]);

  return SearchBox;
}(React.Component);

_defineProperty(SearchBox, "contextType", SearchContext);

SearchBox.propTypes = {
  enablePopularSuggestions: bool,
  enablePredictiveSuggestions: bool,
  dataField: dataFieldValidator,
  aggregationField: string,
  aggregationSize: number,
  nestedField: string,
  size: number,
  title: string,
  defaultValue: string,
  value: string,
  downShiftProps: object,
  placeholder: string,
  showIcon: bool,
  iconPosition: position,
  icon: any,
  showClear: bool,
  clearIcon: any,
  autosuggest: bool,
  strictSelection: bool,
  defaultSuggestions: suggestions,
  debounce: wholeNumber,
  highlight: bool,
  highlightField: highlightField,
  customHighlight: func,
  queryFormat: queryFormat,
  fuzziness: fuzziness,
  showVoiceSearch: bool,
  searchOperators: bool,
  render: func,
  renderPopularSuggestions: func,
  renderError: func,
  renderNoSuggestion: title,
  getMicInstance: func,
  renderMic: func,
  onChange: func,
  onValueChange: func,
  onValueSelected: func,
  onAggregationData: func,
  onError: func,
  onResults: func,
  innerClass: object,
  style: object,
  defaultQuery: func,
  beforeValueChange: func,
  onQueryChange: func,
  className: string,
  loader: object,
  onBlur: func,
  onKeyPress: func,
  onKeyUp: func,
  onFocus: func,
  onKeyDown: func,
  autoFocus: bool,
  URLParams: bool,
  clearOnQueryChange: bool,
  appbaseConfig: appbaseConfig,
  showDistinctSuggestions: bool,
  queryString: bool,
  recentSearchesIcon: element,
  popularSearchesIcon: element,
  distinctField: string,
  distinctFieldConfig: object,
  // internal props
  error: any,
  loading: bool,
  results: object
};
SearchBox.defaultProps = {
  enableRecentSearches: false,
  placeholder: 'Search',
  showIcon: true,
  iconPosition: 'right',
  showClear: false,
  autosuggest: true,
  strictSelection: false,
  debounce: 0,
  showVoiceSearch: false,
  className: '',
  autoFocus: false,
  downShiftProps: {},
  URLParams: false,
  showDistinctSuggestions: true,
  enablePopularSuggestions: false,
  enablePredictiveSuggestions: false,
  clearOnQueryChange: true,
  recentSearches: [],
  recentSearchesIcon: undefined,
  popularSearchesIcon: undefined
};
var SearchBoxDefault = (function (props) {
  return jsx(SearchComponent, _extends({
    triggerQueryOnInit: false,
    value: "" // Init value as empty
    ,
    clearOnQueryChange: true
  }, props, {
    subscribeTo: ['micStatus', 'error', 'requestPending', 'results', 'value', 'recentSearches']
  }), function (_ref3) {
    var error = _ref3.error,
        loading = _ref3.loading,
        results = _ref3.results,
        value = _ref3.value,
        recentSearches = _ref3.recentSearches,
        micStatus = _ref3.micStatus;
    return jsx(SearchBox, _extends({}, props, {
      error: error,
      loading: loading,
      results: results,
      recentSearches: recentSearches,
      micStatus: micStatus
    }));
  });
});

var SearchBase$1 = /*#__PURE__*/function (_React$Component) {
  _inherits(SearchBase$$1, _React$Component);

  var _super = _createSuper(SearchBase$$1);

  function SearchBase$$1(props) {
    var _this;

    _classCallCheck(this, SearchBase$$1);

    _this = _super.call(this, props);
    _this.searchbase = new SearchBase({
      index: props.index,
      url: props.url,
      credentials: props.credentials,
      headers: props.headers,
      appbaseConfig: props.appbaseConfig,
      transformRequest: props.transformRequest,
      transformResponse: props.transformResponse
    });
    return _this;
  }
  /* eslint-disable class-methods-use-this */


  _createClass(SearchBase$$1, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      console.error("An error has occured. You're using SearchBox Version:",
      /* eslint-disable global-require */
      "".concat(process.env.VERSION || require('../package.json').version, "."), 'If you think this is a problem with SearchBox, please try updating', "to the latest version. If you're already at the latest version, please open", 'an issue at https://github.com/appbaseio/searchbox/issues', error, errorInfo);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(SearchContext.Provider, {
        value: this.searchbase
      }, this.props.children);
    }
  }]);

  return SearchBase$$1;
}(React.Component);

SearchBase$1.propTypes = {
  index: stringRequired,
  url: stringRequired,
  credentials: stringRequired,
  headers: object,
  appbaseConfig: appbaseConfig,
  transformRequest: func,
  transformResponse: func
};

var _ref$1 = {
  name: "14leri2-SearchBoxWithStyle",
  styles: "*{margin:0;font-family:inherit;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;};label:SearchBoxWithStyle;"
};

var SearchBoxWithStyle = /*#__PURE__*/function (_React$Component) {
  _inherits(SearchBoxWithStyle, _React$Component);

  var _super = _createSuper(SearchBoxWithStyle);

  function SearchBoxWithStyle() {
    var _this;

    _classCallCheck(this, SearchBoxWithStyle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      mount: false
    });

    return _this;
  }

  _createClass(SearchBoxWithStyle, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        mount: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Global, {
        styles: _ref$1
      }), this.state.mount && /*#__PURE__*/React.createElement(SearchBoxDefault, this.props));
    }
  }]);

  return SearchBoxWithStyle;
}(React.Component);

export { SearchContext, SearchBoxWithStyle as SearchBox, SearchBase$1 as SearchBase, SearchComponent };
//# sourceMappingURL=index.es.js.map
